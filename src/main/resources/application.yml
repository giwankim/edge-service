server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  # Config server
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000 # 5s
      request-read-timeout: 5000 # 5s
      fail-fast: false # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
    # API gateway
    gateway:
      server:
        webflux:
          # HTTP timeouts configuration
          httpclient:
            connect-timeout: 2000
            response-timeout: 5s
            # Netty connection pool
            pool:
              type: elastic
              max-idle-time: 15s
              max-life-time: 60s
          default-filters:
            - SaveSession
            - name: RequestRateLimiter
              args:
                redis-rate-limiter:
                  replenish-rate: 10
                  burst-capacity: 20
                  requested-tokens: 1
            - name: Retry
              args:
                retries: 3
                methods: GET
                series: SERVER_ERROR
                exceptions: java.io.IOException, java.util.concurrent.TimeoutException
                backoff:
                  firstBackoff: 50ms
                  maxBackOff: 500ms
                  factor: 2
                  basedOnPreviousValue: false
                jitter:
                  randomFactor: 0.5
          # Routes
          routes:
            - id: catalog-route
              uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
              predicates:
                - Path=/books/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: catalogCircuitBreaker
                    fallbackUri: forward:/catalog-fallback
            - id: order-route
              uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
              predicates:
                - Path=/orders/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: orderCircuitBreaker
  # Redis session store
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  session:
    timeout: 10m
    redis:
      namespace: polar:edge
  # Keycloak configuration
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: polar-keycloak-secret
            scope: openid
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/PolarBookshop

# Circuit breaker configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 20
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state:
          seconds: 15
  timelimiter:
    configs:
      default:
        timeout-duration:
          seconds: 5

#logging:
#  level:
#    io.github.resilience4j: DEBUG
